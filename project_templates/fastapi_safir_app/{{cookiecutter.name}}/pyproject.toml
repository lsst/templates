[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "{{cookiecutter.name}}"
description = "{{cookiecutter.summary}}"
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Private :: Do Not Upload",
    "Typing :: Typed",
]
requires-python = ">=3.13"
dependencies = [
    "fastapi>=0.100",
    "pydantic>2",
    "pydantic-settings>=2",
    {%- if cookiecutter.flavor == "UWS" %}
    "safir[uws]>=9.0.1",
    {%- else %}
    "safir>=5",
    {%- endif %}
    "uvicorn[standard]>=0.34",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://{{cookiecutter.name | lower}}.lsst.io"
Source = "https://github.com/{{cookiecutter.github_org}}/{{cookiecutter.name}}"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "asgi-lifespan",
    "coverage[toml]>=5.0.2",
    "httpx",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "respx",
    "scriv[toml]",
]
lint = [
    "pre-commit",
    "pre-commit-uv",
    "ruff>=0.12",
]
tox = [
    "tox>=4.24",
    "tox-uv>=1.25",
]
typing = [
    "mypy>=1.15",
]

[tool.coverage.run]
parallel = true
branch = true
source = ["{{ cookiecutter.module_name }}"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
plugins = ["pydantic.mypy"]
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

# Use the generic Ruff configuration in ruff.toml and extend it with only
# project-specific settings. Add a [tool.ruff.lint.extend-per-file-ignores]
# section for project-specific ignore rules.
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.isort]
known-first-party = ["{{cookiecutter.module_name}}", "tests"]
split-on-trailing-comma = false

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ "{{ version }} ({{ date.strftime('%Y-%m-%d') }})" }}"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"

[tool.setuptools_scm]
